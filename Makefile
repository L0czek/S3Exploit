SOURCE_DIR        = $(shell pwd)
GRUB_DIR          = $(SOURCE_DIR)/grub
BUSYBOX_DIR       = $(SOURCE_DIR)/busybox
KERNEL_DIR        = $(SOURCE_DIR)/kernel/linux
KERNEL_BINARY     = $(KERNEL_DIR)/arch/x86/boot/bzImage
KMODULE_DIR       = $(SOURCE_DIR)/kernel/module
KMODULE_BINARY    = $(KMODULE_DIR)/s3exploit.ko
EXPLOIT_DIR       = $(SOURCE_DIR)/exploit
EXPLOIT_BINARY_DIR= $(EXPLOIT_DIR)/build
CONFIG_DIR        = $(SOURCE_DIR)/configs
INITRAMFS_DIR     = $(SOURCE_DIR)/initramfs
ROOTFS_DIR        = $(SOURCE_DIR)/rootfs
INITS_DIR         = $(SOURCE_DIR)/inits
PAYLOADS_DIR      = $(SOURCE_DIR)/payloads

ARCH               ?= x86_64
CROSS_PREFIX       ?= 
USB_STICK_MNT_PATH ?= /media/loczek/USB
USB_STICK_DEV_PATH ?= /dev/sda1
USB_STICK_UUID     ?= $(shell lsblk -no UUID $(USB_STICK_DEV_PATH))

SUBMODULES_FILES_TO_CHECK = \
	$(GRUB_DIR)/bootstrap \
	$(BUSYBOX_DIR)/Makefile

CONFIG_FILES = \
	$(CONFIG_DIR)/busybox \
	$(CONFIG_DIR)/kernel \
	$(CONFIG_DIR)/grub.cfg 

INIT_FILES = \
	$(INITS_DIR)/initramfs_init \
	$(INITS_DIR)/rootfs_init

GREEN_COLOR = \\033[0;32m
RED_COLOR   = \\033[0;31m
NC          = \\033[0;m


integrity-check:
	@for file_path in $(SUBMODULES_FILES_TO_CHECK); do \
		if ! [ -f $$file_path ]; then \
			echo "$(RED_COLOR)$$file_path not found did you initialize submodules?$(NC)"; \
			exit 1; \
		fi; \
	done;
	@for file_path in $(CONFIG_FILES) $(INIT_FILES); do \
		if ! [ -f $$file_path ]; then \
			echo "$(RED_COLOR)$$file_path not found something went wrong$(NC)"; \
			exit 1; \
		fi; \
	done;

compile-grub: integrity-check $(GRUB_DIR)
	@echo "$(GREEN_COLOR)Building grub2.$(NC)"
	@if ! [ -f $(GRUB_DIR)/Makefile ]; then \
		if ! (cd $(GRUB_DIR) && ./bootstrap && ./autogen.sh && ./configure --with-platform=efi); then \
			echo "$(RED_COLOR)Grub configuration error. Exiting...$(NC)"; \
			exit 1; \
		else \
			echo "$(GREEN_COLOR)Grub configuration finished.$(NC)"; \
		fi; \
	fi;
	@$(MAKE) -C $(GRUB_DIR) 
	@echo "$(GREEN_COLOR)Finished building grub2.$(NC)"

initramfs: compile-busybox
	@echo "$(GREEN_COLOR)Creating initramfs$(NC)";
	@if ! [ -d $(INITRAMFS_DIR) ]; then \
		mkdir -p $(INITRAMFS_DIR) $(INITRAMFS_DIR)/bin $(INITRAMFS_DIR)/etc; \
	fi;
	@cp -v $(BUSYBOX_DIR)/busybox $(INITRAMFS_DIR)/bin/
	@cp -v $(INITS_DIR)/initramfs_init $(INITRAMFS_DIR)/init
	chmod +x $(INITRAMFS_DIR)/init
	echo "UUID=$(USB_STICK_UUID)	/mnt	vfat	defaults	0	0" > $(INITRAMFS_DIR)/etc/fstab
	echo  $(USB_STICK_UUID) > $(INITRAMFS_DIR)/rootfs_uuid
	@echo "$(GREEN_COLOR)Finished building initramfs$(NC)";

.PHONY: rootfs
rootfs: compile-kernel compile-kernel-module compile-exploit
	@echo "$(GREEN_COLOR)Creating rootfs$(NC)";
	@if ! [ -d $(ROOTFS_DIR) ]; then \
		mkdir $(ROOTFS_DIR); \
	fi;
	
	@cp -v $(KERNEL_BINARY) $(ROOTFS_DIR)/
	@cp -v $(KMODULE_BINARY) $(ROOTFS_DIR)/
	@cp -v $(INITS_DIR)/rootfs_init $(ROOTFS_DIR)/init
	@cp -rv $(EXPLOIT_BINARY_DIR)/* $(ROOTFS_DIR)/
	chmod +x $(ROOTFS_DIR)/init
	@cp -rv $(PAYLOADS_DIR) $(ROOTFS_DIR)/
	@echo "$(GREEN_COLOR)Finished creating rootfs$(NC)";

.PHONY: rootfs-fast
rootfs-fast: compile-kernel-module compile-exploit
	@echo "$(GREEN_COLOR)Creating rootfs$(NC)";
	@if ! [ -d $(ROOTFS_DIR) ]; then \
		echo "$(RED_COLOR) $(ROOTFS_DIR) not found use `make rootfs` to create it.$(NC)"; \
		exit 1; \
	fi;
	
	@cp -v $(KMODULE_BINARY) $(ROOTFS_DIR)/
	@cp -rv $(EXPLOIT_BINARY_DIR)/* $(ROOTFS_DIR)/
	@echo "$(GREEN_COLOR)Finished creating rootfs$(NC)";

compile-busybox: integrity-check $(BUSYBOX_DIR) $(CONFIG_DIR)/busybox
	@echo "$(GREEN_COLOR)Building busybox.$(NC)"
	@cp -v $(CONFIG_DIR)/busybox $(BUSYBOX_DIR)/.config
	@$(MAKE) -C $(BUSYBOX_DIR) 
	@echo "$(GREEN_COLOR)Finished compiling busybox.$(NC)"

compile-kernel: integrity-check initramfs $(KERNEL_DIR) $(CONFIG_DIR)/kernel
	@echo "$(GREEN_COLOR)Building kernel.$(NC)";
	@cp -v $(CONFIG_DIR)/kernel $(KERNEL_DIR)/.config
	echo "CONFIG_INITRAMFS_SOURCE=\"$(INITRAMFS_DIR)\"" >> $(KERNEL_DIR)/.config
	@ARCH=$(ARCH) CROSS_COMPILE=$(CROSS_PREFIX) $(MAKE) -C $(KERNEL_DIR) 
	@if ! [ -f $(KERNEL_BINARY) ]; then \
		echo "$(RED_COLOR)Kernel not compiled.$(NC)"; \
		exit 1; \
	fi;
	@echo "$(GREEN_COLOR)Finished building kernel.$(NC)";

compile-kernel-module: integrity-check $(KMODULE_DIR)
	@echo "$(GREEN_COLOR)Bulding kernel module.$(NC)"
	@KDIR=$(KERNEL_DIR) $(MAKE) -C $(KMODULE_DIR)
	@echo "$(GREEN_COLOR)Finished building kernel module.$(NC)"

compile-exploit: integrity-check $(EXPLOIT_DIR)
	@echo "$(GREEN_COLOR)Building exploit.$(NC)"
	@ADD_INC_DIRS=$(KMODULE_DIR)/src $(MAKE) -C $(EXPLOIT_DIR)
	@echo "$(GREEN_COLOR)Finished building exploit.$(NC)"

compile-all: compile-grub compile-busybox compile-kernel compile-kernel-module compile-exploit

compile-commands: clean-kernel-module clean-exploit
	@echo "$(GREEN_COLOR)Creating compile_commands.json using bear.$(NC)"
	@(cd $(KMODULE_DIR) && bear -- $(MAKE) CC=clang)
	@(cd $(EXPLOIT_DIR) && bear -- $(MAKE) ADD_INC_DIRS=$(KMODULE_DIR)/src)
	@echo "$(GREEN_COLOR)Finished creating compile_commands.json.$(NC)"

.PHONY: clean-grub
clean-grub:
	@echo "$(GREEN_COLOR)Cleaning grub.$(NC)"
	@$(MAKE) -C $(GRUB_DIR) clean
	@echo "$(GREEN_COLOR)Finished cleaning grub.$(NC)"


.PHONY: clean-busybox
clean-busybox:
	@echo "$(GREEN_COLOR)Cleaning busybox.$(NC)"
	@$(MAKE) -C $(BUSYBOX_DIR) clean
	@echo "$(GREEN_COLOR)Finished cleaning busybox.$(NC)"

.PHONY: clean-kernel
clean-kernel:
	@echo "$(GREEN_COLOR)Cleaning kernel.$(NC)"
	@$(MAKE) -C $(KERNEL_DIR) clean
	@echo "$(GREEN_COLOR)Finished cleaning kernel.$(NC)"

.PHONY: clean-kernel-module
clean-kernel-module:
	@echo "$(GREEN_COLOR)Cleaning kernel module.$(NC)"
	@$(MAKE) -C $(KMODULE_DIR) clean
	@echo "$(GREEN_COLOR)Finished cleaning kernel module.$(NC)"

.PHONY: clean-exploit
clean-exploit:
	@echo "$(GREEN_COLOR)Cleaning exploit.$(NC)"
	@$(MAKE) -C $(EXPLOIT_DIR) clean
	@echo "$(GREEN_COLOR)Finished cleaning exploit.$(NC)"

.PHONY: clean-compile-commands
clean-compile-commands:
	@echo "$(GREEN_COLOR)Cleaning compile_commnads.json.$(NC)"
	rm -f $(KMODULE_DIR)/compile_commands.json
	rm -f $(EXPLOIT_DIR)/compile_commands.json
	@echo "$(GREEN_COLOR)Finished cleaning compile_commands.json$(NC)"

.PHONY: clean-all
claen-all: \
	clean-grub \
	clean-busybox \
	clean-kernel \
	clean-kernel-module \
	clean-exploit \
	clean-compile-commands

run-qemu: compile-kernel
	@if [ $(ARCH) = x86_64 ]; then \
		qemu-system-x86_64 -kernel $(KERNEL_BINARY) -nographic --append "console=ttyS0"; \
	else \
		qemu-system-x86 -kernel $(KERNEL_BINARY) -nographic --append "console=ttyS0"; \
	fi;

install-grub: compile-grub
	@echo "$(GREEN_COLOR)Installing grub.$(NC)"
	
	@if ! ( ( ! [ -f $(USB_STICK_DEV_PATH) ] ) || mountpoint -q $(USB_STICK_MNT_PATH) ); then \
		echo "$(RED_COLOR)Invalid path: $(USB_STICK_DEV_PATH) or $(USB_STICK_MNT_PATH)$(NC)"; \
		exit 1; \
	fi;
	
	sudo $(GRUB_DIR)/grub-install \
		--removable \
		--target x86_64-efi \
		--directory $(GRUB_DIR)/grub-core/ \
		$(USB_STICK_DEV_PATH) \
		--efi-directory $(USB_STICK_MNT_PATH) \
		--boot-directory $(USB_STICK_MNT_PATH)/boot
	
	@cp -v $(CONFIG_DIR)/grub.cfg $(USB_STICK_MNT_PATH)/boot/grub/
	echo "set rootfs_uuid=$(USB_STICK_UUID)" > $(USB_STICK_MNT_PATH)/boot/grub/rootfs_uuid.cfg
	
	@echo "$(GREEN_COLOR)Finished installing grub.$(NC)"
		
install-rootfs: rootfs
	@echo "$(GREEN_COLOR)Installing rootfs$(NC)"
	
	@if ! ( ( ! [ -f $(USB_STICK_DEV_PATH) ] ) || mountpoint -q $(USB_STICK_MNT_PATH) ); then \
		echo "$(RED_COLOR)Invalid path: $(USB_STICK_DEV_PATH) or $(USB_STICK_MNT_PATH)$(NC)"; \
		exit 1; \
	fi;
	
	@cp -rv $(ROOTFS_DIR)/* $(USB_STICK_MNT_PATH)/
	@echo "$(GREEN_COLOR)Finished installing rootfs.$(NC)"

install-rootfs-fast: rootfs-fast
	@echo "$(GREEN_COLOR)Installing rootfs$(NC)"
	
	@if ! ( ( ! [ -f $(USB_STICK_DEV_PATH) ] ) || mountpoint -q $(USB_STICK_MNT_PATH) ); then \
		echo "$(RED_COLOR)Invalid path: $(USB_STICK_DEV_PATH) or $(USB_STICK_MNT_PATH)$(NC)"; \
		exit 1; \
	fi;
	
	@cp -rv $(ROOTFS_DIR)/* $(USB_STICK_MNT_PATH)/
	@echo "$(GREEN_COLOR)Finished installing rootfs.$(NC)"

install-all: install-grub install-rootfs
