#include "payload.hpp"

#include <boost/property_tree/ptree_fwd.hpp>
#include <filesystem>
#include <optional>
#include <boost/property_tree/ini_parser.hpp>
#include "log.hpp"

std::optional<Payload> try_load_payload(const std::filesystem::path& path) {
    boost::property_tree::ptree ptree;
    boost::property_tree::ini_parser::read_ini(path.generic_string(), ptree);

    auto name_opt = ptree.get_optional<std::string>("Payload.name");
    auto path_opt = ptree.get_optional<std::string>("Payload.path");
    auto offset_opt = ptree.get_optional<std::uint32_t>("Payload.offset");

    if (!name_opt || !path_opt || !offset_opt) {
        return {};
        log_warn("File %s has errors omitting.\n", path.c_str());
    }

    return Payload {
        *name_opt,
        *path_opt,
        *offset_opt
    };
}

std::vector<Payload> fetch_payloads(const std::string& payload_dir) {
    std::vector<Payload> payloads;

    for (const auto & entry : std::filesystem::directory_iterator(payload_dir)) {
        const auto& path = entry.path();

        if (path.extension() == ".ini") {
            auto payload_opt = try_load_payload(path);
            if (payload_opt)
                payloads.push_back(std::move(*payload_opt));
        }
    }

    return payloads;
}
