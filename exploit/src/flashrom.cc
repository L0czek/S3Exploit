#include "flashrom.hpp"

#include <iterator>
#include <libflashrom.h>
#include <memory>
#include <log.hpp>


Flashrom::Flashrom() {

}

Flashrom::Flashrom(Flashrom&& ) {

}

Flashrom::~Flashrom() {
    if (flash_ctx)
        flashrom_flash_release(flash_ctx);

    if (programmer)
        flashrom_programmer_shutdown(programmer);

    flashrom_shutdown();
}

static int log(flashrom_log_level level, const char* format, va_list vargs) {
    const char* msg = "FLASHROM: ";    
    switch (level) {
        case flashrom_log_level::FLASHROM_MSG_INFO: log_info(msg); break;
        case flashrom_log_level::FLASHROM_MSG_WARN: log_warn(msg); break;
        case flashrom_log_level::FLASHROM_MSG_ERROR: log_error(msg); break;
        default:
            break;
    }
    return vprintf(format, vargs);
}

std::unique_ptr<Flashrom> Flashrom::init(bool perform_self_check) {
    if (!flashrom_init(static_cast<int>(perform_self_check))) {
        flashrom_set_log_callback(&log);
        return std::unique_ptr<Flashrom>(new Flashrom);
    }

    return nullptr;
}

bool Flashrom::setup_programmer() {
    int status = flashrom_programmer_init(&programmer, "internal", "");
    return status == 0;
}

bool Flashrom::setup_flash_chip() {
    int status = flashrom_flash_probe(&flash_ctx, programmer, nullptr);
    return status == 0;
}

std::size_t Flashrom::flash_size() {
    return flashrom_flash_getsize(flash_ctx);
}

bool Flashrom::setup_layout() {
    int status = flashrom_layout_read_from_ifd(&flash_layout, flash_ctx, nullptr, 0);
    if (status)
        return false;

    status = flashrom_layout_include_region(flash_layout, "bios");
    if (status)
        return false;

    flashrom_layout_set(flash_ctx, flash_layout);
    flashrom_flag_set(flash_ctx, FLASHROM_FLAG_VERIFY_WHOLE_CHIP, 0);

    return true;
}

std::string Flashrom::pad_to_flash_size(const std::string& payload, std::size_t offset) {
    std::string after_padding(offset, '\0');
    std::string before_padding(flash_size() - offset - payload.size(), '\0');
    log_ok("Applied 0x%X before and 0x%X bytes of padding\n", before_padding.size(), after_padding.size());
    return before_padding + payload + after_padding;
}

bool Flashrom::flash_bios(std::string& bios_data) {
    int status = flashrom_image_write(flash_ctx, bios_data.data(), bios_data.size(), nullptr);    
    if (status) 
        return -1;

    status = flashrom_image_verify(flash_ctx, bios_data.data(), bios_data.size());
    return status == 0;
}
