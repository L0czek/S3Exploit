#ifndef __ERROR_HPP__
#define __ERROR_HPP__

#include <variant>
#include <optional>
#include <functional>
#include <iostream>

inline __attribute__((noreturn)) void panic(const char* msg) {
    puts(msg);
    exit(-1);
}

template<typename Value> struct Ok  { Value val; Ok(Value val) : val(std::move(val)) {} };
template<typename Error> struct Err { Error err; Err(Error err) : err(std::move(err)) {} };

template<typename Value, typename Error> class Result {
    std::optional<Ok<Value>> value;
    std::optional<Err<Error>> error;
public:
    Result(Ok<Value> val) : value(std::move(val)), error() {}
    Result(Err<Error> err) : value(), error(std::move(err)) {}

    bool contains_value() const noexcept { return static_cast<bool>(value); }
    bool contains_error() const noexcept { return static_cast<bool>(error); }

    const Value& unwrap() const noexcept {
        if (contains_value())
            return (*value).val;
        else 
            panic("No value to return");
    }

    Value unwrap() noexcept {
        if (contains_value())
            return std::move(*value).val;
        else 
            panic("No value to return");
    }

    const Error& err() const noexcept {
        if (contains_error())
            return (*error).err;
        else 
            panic("No error to return");
    }

    Error err() noexcept {
        if (contains_error())
            return std::move(*error).err;
        else 
            panic("No error to return");
    }

    template<typename Function>
    auto map_err(const Function& function) const noexcept{
        if (contains_error())
            return function((*error).err);
        else
            panic("No error to map");
    }

    template<typename Function>
    auto map_err(const Function& function) noexcept{
        if (contains_error())
            return function(std::move(*error).err);
        else
            panic("No error to map");
    }

    operator bool() const noexcept { return contains_value(); }
    explicit operator Value() const noexcept { return unwrap(); }
    explicit operator Value() noexcept { return unwrap(); }
};

#endif
