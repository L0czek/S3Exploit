#ifndef __S3_BOOT_SCRIPT__
#define __S3_BOOT_SCRIPT__

#include <linux/types.h>

#define Opcode_IoWrite            ((opcode_t) 0)
#define Opcode_IoChangeBits       ((opcode_t) 1)
#define Opcode_MemWrite           ((opcode_t) 2)
#define Opcode_MemChangeBits      ((opcode_t) 3)
#define Opcode_PciWrite           ((opcode_t) 4)
#define Opcode_PciChangeBits      ((opcode_t) 5)
#define Opcode_SmbusExecCmd       ((opcode_t) 6)
#define Opcode_SleepFor           ((opcode_t) 7)
#define Opcode_CallAddress        ((opcode_t) 8)
#define Opcode_SetDeviceState     ((opcode_t) 9)
#define Opcode_End                ((opcode_t) 0xff)

#define FOR_ALL_INSTRUCTIONS(instr, bootscript) \
    for ((instr) = (struct Header *) (bootscript); \
         (instr)->Opcode != Opcode_End; \
         (instr) = (struct Header *) ( ( (uint8_t *) (instr) ) + (instr)->Size))

typedef uint16_t opcode_t;

struct __attribute__((packed)) Header {
    opcode_t Opcode;
    uint8_t Size;
};

struct __attribute__((packed)) WriteInstr {
    struct Header header;

    uint32_t Width;        // Args[0]
    uint32_t Count;        // Args[1]
    uint32_t LowAddress;   // Args[2]
    uint32_t HighAddress;  // Args[3]

    uint8_t Buffer[0];
};

struct __attribute__((packed)) ChangeBitsInstr {
    struct Header header;

    uint32_t Width;        // Args[0]
    uint32_t LowAddress;   // Args[1]
    uint32_t HighAddress;  // Args[2]

    uint64_t SetBitsMask;      // decode from Args[3:4]
    uint64_t ResetBitsMask;    
};

struct __attribute__((packed)) SmbusExecCmdInstr {
    struct Header header;

    uint32_t SlaveAddress; // Args[0]
    uint32_t reserved;
    uint32_t Command;      // Args[2]
    uint32_t Operation;    // Args[4]
    uint8_t PecCheck;      // Args[5]
    uint32_t Length;       // &Args[5] + 1

    uint8_t Buffer[0];   // &Args[6] + 1
};

struct __attribute__((packed)) SleepForInstr {
    struct Header header;

    uint32_t us;           // Args[0]
};

struct __attribute__((packed)) CallAddressInstr {
    struct Header header;

    uint32_t Address;      // Args[0]
};

struct __attribute__((packed)) SetDeviceStateInstr {
    struct Header header;

    uint32_t Width;            // Args[0]
    uint32_t LowAddress;       // Args[1]
    uint32_t HighAddress;      // Args[2]

    uint64_t BitMask;          // Args[3:4]
    uint64_t ExpectedValue;    // Args[5:6]

    uint32_t SleepForUs;       // Args[7]
    uint32_t reserved;
    uint64_t NumberOfTries;    // Args[9:10]
};

struct __attribute__((packed)) EndInstr {
    struct Header header;
};

struct __attribute__((packed)) AcpiVariableSet {
    uint64_t AcpiReservedMemoryBase;
    uint64_t AcpiReservedMemorySize;
    uint64_t S3ReservedLowMemoryBase;
    uint64_t AcpiBootScriptTable;
    uint64_t RuntimeScriptTableBase;
    uint64_t AcpiFacsTable;
};


#endif
